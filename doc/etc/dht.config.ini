; Dht Node Configuration
;
; A dht node is a server that communicates via a binary protocol and stores
; data in a key/value store. Each node is responsible for a specific hash
; range.
;
; (c) 2009-2017 dunnhumby Germany GmbH. All rights reserved.


; Node configuration
;
; address               node address to bind to
; port                  port to listen on
; data_dir              location of data directory
; minval                minimum hash responsibility range
; maxval                maxmimum hash responsibility range
; connection_limit      maximum number of accepted connections

[Server]

address                 = 127.0.0.1
port                    = 10000
data_dir                = data
minval                  = 0x0000000000000000
maxval                  = 0xffffffffffffffff
connection_limit        = 5000


; Node performance configuration
;
; write_flush_ms        millisecond interval at which to flush the buffers of
;                       any stream requests

[Performance]

write_flush_ms          = 250


; PID lock settings
;
; path                  Path at which the PID lock file will be written, when
;                       the application starts up. If a file at this location
;                       is already locked by another process, the application
;                       will fail to start.

[PidLock]

path = etc/pid.lock


; Memory node configuration
;
; size_limit            dht node size limit in bytes (0 = no limit)
; disable_direct_io     determines if regular buffered I/O (true) or direct I/O
;                       is used (false, the default). This should be only set to
;                       true for testing purposes, using direct I/O imposes
;                       some restrictions over the type of filesystem that
;                       complicates testing quite a bit, making it impossible
;                       to load/dump files to overlayfs, tmpfs or encrypted
;                       filesystems.
;                       This option SHOULD NEVER be set to true in live systems.
; lock_memory           determines if the node will mlockall() the memory so it
;                       doesn't get swapped out by the kernel under heavy memory
;                       pressure (default is true).
;                       This option is mostly intended for testing
;                       environments, in live systems it should normally always
;                       be true.
; allow_out_of_range    determines the behaviour of the node upon loading a
;                       record outside of the configured hash range from a
;                       channel dump. Accepted options are: load, fatal (quit
;                       program), ignore (do not load record).
; bnum                  number of buckets to allocate in each channel - this
;                       value is passed into tokyocabinet. (If not specified or
;                       0, the default value - as defined internally by TC - is
;                       used.)
; batch_size            (optional) size of the batches used by compressed batch
;                       requests (e.g. GetAll). This is a de facto record size
;                       limit, as any records that exceed the configured batch
;                       size cannot be returned to clients via batch requests.

[Options_Memory]

; This configuration is more suited for local test runs, when running in the
; live system is usually better to stick with the defaults for many options.
size_limit          = 0
disable_direct_io   = false
lock_memory         = false
allow_out_of_range  = load
bnum                = 0
batch_size          = 65535


; Stats output configuration
;
; file_name             The file name to write the stats to

[STATS]
file_name = log/stats.log


; Version logging
;
; By default the program version is logged in at log/version.log.
; If you want to change that, you can uncomment the following lines.
;
; The default_version_log option disables the default logging, you can leave
; that commented if you want the version number to be logged at the default
; location *and* anywhere else.

;[VERSION]
;default_version_log = false
;[LOG.ocean.util.Main.version]
;file  = log/version.log
;level = info


; Tango logging configuration, not very useful right now, will be useful when
; all logging is done using Tango logging, for now is just for future reference.
;
; General logging configuration
;
; This configures the tango logging subsystem, these are the general options
; for all loggers.
;
; file_count		Number of files to keep while rotating the log file
; max_file_size		Maximum number of bytes stored in a file before
;                       rotating it
; buffer_size		Size used for the logging formatting buffer. If you see
; 			that log messages are being truncated, try increasing
; 			this size. By default (or specifying 0) it uses the
; 			2048 internal tango buffer. This size will be used for
; 			each logger, so the memory used will be buffer_size
; 			* loggers. So it might be a better idea to override
; 			this only for loggers that really need it.

;[LOG]
;file_count    = 10
;max_file_size = 10000000

; Specific logger configuration
;
; You can have one of this sections for each module that uses a tango logger.
; You can configure a logger adding a section named [LOG.sub.module]. The most
; useful modules are included as examples, but you can activate logging for
; other modules as well.
;
; [LOG.Root] is a special section which is used to configure all the loggers
; (see tango docs for details).
;
; console		Indicates if the log should be sent to the console (bool)
; file 			File where to write the logs
; level			The minimum level to log (trace, info, warn, error, fatal, none)
; propagate		Tells the logger to propagate the level to sub-loggers.
; buffer_size	Size used for the logging formatting buffer. See the
;			comment in the general configuration for details. This
;			is not propagated to sub-loggers, even if 'propagate'
;			is true.

[LOG.Root]
console   = false
file      = log/root.log
level     = trace
propagate = true


